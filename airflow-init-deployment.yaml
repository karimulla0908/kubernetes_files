apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-init
  labels:
    app: airflow
    component: init
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: init
  template:
    metadata:
      labels:
        app: airflow
        component: init
    spec:
      volumes:
        - name: airflow-plugins
          persistentVolumeClaim:
            claimName: airflow-worker-claim1  # Corrected claimName
        - name: airflow-logs
          persistentVolumeClaim:
            claimName: airflow-worker-claim0
      initContainers:
        - name: airflow-init-container
          image: airflow090820.azurecr.io/my_airflow_custom_image:latest
          command: ["/bin/bash", "-c"]
          args:
            - |
              function ver() {
                printf "%04d%04d%04d%04d" ${1//./ }
              }
              if [[ -z "$AIRFLOW_UID" ]]; then
                echo
                echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\033[0m"
                echo "If you are on Linux, you SHOULD follow the instructions below to set "
                echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
                echo "For other operating systems you can get rid of the warning with manually created .env file:"
                echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
                echo
              fi
              one_meg=1048576
              mem_available=$(( $(getconf _PHYS_PAGES) * $(getconf PAGE_SIZE) / one_meg ))
              cpus_available=$(grep -cE 'cpu[0-9]+' /proc/stat)
              disk_available=$(df / | tail -1 | awk '{print $4}')
              warning_resources="false"
              if (( mem_available < 4000 )); then
                echo
                echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\033[0m"
                echo "At least 4GB of memory required. You have $(numfmt --to iec $((mem_available * one_meg)))"
                echo
                warning_resources="true"
              fi
              if (( cpus_available < 2 )); then
                echo
                echo -e "\033[1;33mWARNING!!!: Not enough CPUs available for Docker.\033[0m"
                echo "At least 2 CPUs recommended. You have $cpus_available"
                echo
                warning_resources="true"
              fi
              if (( disk_available < one_meg * 10 )); then
                echo
                echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\033[0m"
                echo "At least 10 GBs recommended. You have $(numfmt --to iec $((disk_available * 1024)))"
                echo
                warning_resources="true"
              fi
              if [[ $warning_resources == "true" ]]; then
                echo
                echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\033[0m"
                echo "Please follow the instructions to increase amount of resources available:"
                echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
                echo
              fi
              exec /entrypoint airflow db migrate
              exec /entrypoint airflow db init
              exec /entrypoint airflow version
          env:
            - name: AIRFLOW_PIP_ADDITIONAL_REQUIREMENTS
            - name: AIRFLOW__API__AUTH_BACKENDS
              value: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
            - name: AIRFLOW__CELERY__BROKER_URL
              value: redis://:@redis:6379/0
            - name: AIRFLOW__CELERY__RESULT_BACKEND
              value: db+postgresql://airflow:airflow@postgres:5432/airflow  # Adjusted to use PostgreSQL service
            - name: AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION
              value: "true"
            - name: AIRFLOW__CORE__EXECUTOR
              value: CeleryExecutor
            - name: AIRFLOW__CORE__FERNET_KEY
              value: 42oAR66FqGYr0S9IwNDUNERL78yYvRZO-tv2Y5sQE4c=
            - name: AIRFLOW__CORE__LOAD_EXAMPLES
              value: "False"
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow  # Adjusted to use PostgreSQL service
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow  # Adjusted to use PostgreSQL service
            - name: AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL
              value: "300"
            - name: AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK
              value: "true"
            - name: _AIRFLOW_DB_MIGRATE
              value: "true"
            - name: _AIRFLOW_WWW_USER_CREATE
              value: "true"
            - name: _AIRFLOW_WWW_USER_PASSWORD
              value: airflow
            - name: _AIRFLOW_WWW_USER_USERNAME
              value: airflow
            - name: donot_pickle
              value: "True"
      containers:
        - name: airflow-main
          image: airflow090820.azurecr.io/my_airflow_custom_image:latest
          command: ["/bin/sh", "-c"]
          args: ["sleep infinity"]
          volumeMounts:
            - mountPath: /opt/airflow/
              name: airflow-claim0
            - mountPath: /opt/airflow/plugins
              name: airflow-claim1
            - mountPath: /opt/airflow/logs
              name: airflow-claim0
          securityContext:
            runAsUser: 0  # Run the container as airflow user
            runAsGroup: 0
      restartPolicy: Always
      volumes:
        - name: airflow-claim0
          persistentVolumeClaim:
            claimName: airflow-claim0
        - name: airflow-claim1
          persistentVolumeClaim:
            claimName: airflow-claim1
